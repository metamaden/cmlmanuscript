if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("minfi")]
https://cran.rstudio.com/bin/windows/Rtools/
setwd("~/GitHub/cmlmanuscript")
?glmnet
library(glmnet)
?glmnet
load("~/GitHub/cmlmanuscript/data/seset_degseahack_targetaml.rda")
dim(deg.seset)
head(pData(deg.seset))
head(phenoData(deg.seset))
deg.seset
dim(colData(deg.seset))
?SummarizedExperiment
class(deg.seset)
dim(metadata(deg.seset))
library(SummarizedExperiment)
dim(metadata(deg.seset))
dim(colData(deg.seset))
colnames(colData(deg.seset))
devtools::document()
setwd("~/GitHub/cmlmanuscript/doc")
library(cmlmanuscript)
data("deg_seset_targetaml")
library(cmlmanuscript)
data("deg_seset_targetaml")
dim(deg.seset)
table(deg.seset$Risk.group)
# summarize gender and age at first diagnosis
message("table of gender x binarized risk")
table(degfilt.se$Gender,degfilt.se$deg.risk)
degfilt.se <- deg.seset[,which(deg.seset$deg.risk %in% c(0,1))] # subset on deg risk group available
message("dim of filtered se object")
dim(degfilt.se)
deg.seset$deg.risk <- ifelse(deg.seset$Risk.group=="Low", 0,
ifelse(deg.seset$Risk.group %in% c("Standard","High"),1,"NA"))
table(deg.seset$deg.risk)
message("table of risk group x binarized risk group")
table(deg.seset$deg.risk, deg.seset$Risk.group)
degfilt.se <- deg.seset[,which(deg.seset$deg.risk %in% c(0,1))] # subset on deg risk group available
message("dim of filtered se object")
dim(degfilt.se)
# summarize gender and age at first diagnosis
message("table of gender x binarized risk")
table(degfilt.se$Gender,degfilt.se$deg.risk)
message("chisq test of gender x binarized risk")
chisq.test(table(degfilt.se$Gender,degfilt.se$deg.risk)) # p-value = 0.8044, gender evenly dist
degfilt.se$binom.age <- ifelse(degfilt.se$Age.at.Diagnosis.in.Days >= median(degfilt.se$Age.at.Diagnosis.in.Days), "old" ,"young")
message("table of binarized age-at-diag x binarized risk")
table(degfilt.se$binom.age,degfilt.se$deg.risk)
message("chisq results of binarized age-at-diag x binarized risk")
chisq.test(table(degfilt.se$binom.age,degfilt.se$deg.risk))
save.image("~/GitHub/cmlmanuscript/doc/dataprep.RData")
for(i in 1:15){message(i)}
i=1
rep2 <- runLasso(seset=degfilt.se[!rownames(degfilt.se) %in% genes.exclude,])
lexclude = list()
lrep = list()
lrep[[i]] = runLasso(seset=degfilt.se)
library(glmnet)
library(SummarizedExperiment)
lrep[[i]] = runLasso(seset=degfilt.se)
names(lrep[[i]]$nonzero.coef)
lexclude[[i]] = names(lrep[[i]]$nonzero.coef)
i = 2
unlist(lexclude)
lrep[[i]] = runLasso(seset=degfilt.se[!rownames(degfilt.se) %in% unlist(lexclude),])
lrep[[i]] = runLasso(seset=degfilt.se[!rownames(degfilt.se) %in% unlist(lexclude),])
lexclude[[i]] = names(lrep[[i]]$nonzero.coef)
length(unlist(lexclude))
length(lexclude[[1]])
ptype = "lasso"
lexclude = list()
lrep = list()
for(i in 1:15){
if(i == 1){
lrep[[i]] = runLasso(seset = degfilt.se)
} else{
lrep[[i]] = runLasso(seset=degfilt.se[!rownames(degfilt.se) %in% unlist(lexclude),])
}
lexclude[[i]] = names(lrep[[i]]$nonzero.coef)
message("finished ", ptype," rep ", i)
}
length(lrep)
lrep[[1]]$confusionMatrix
lrep[[2]]$confusionMatrix
lrep[[3]]$confusionMatrix
lrep[[4]]$confusionMatrix
i=1
ptype = "ridge regression"
qimpfilt = 5
lexclude = list()
lrep = list()
lrep[[i]] = runRidge(seset = degfilt.se)
lrep[[1]]$confusionMatrix
lrep[[1]]$final.model
install_github("metamaden/cmlmanuscript")
library(devtools)
install_github("metamaden/cmlmanuscript")
library(cmlmanuscript)
ptype = "ridge regression"
qimpfilt = 5
lexclude = list()
lrep = list()
i=1
lrep[[i]] = runRidge(seset = degfilt.se)
lrep[[1]]$confusionMatrix
seset = degfilt.se
seed = 2019
set.seed(seed)
gene.names = as.character(rownames(rowData(seset)))
var.classifier = seset$deg.risk
df = t(assay(seset))
train.names = colnames(assay(seset[,seset$exptset.seahack=="train"]))
test.names = colnames(assay(seset[,seset$exptset.seahack=="test"]))
response <- var.classifier
predictors <- gene.names
y <- factor(response); names(y) <- colnames(assay(seset)) # response var obj
x = df[,colnames(df) %in% predictors] # genes of interest
contrast <- contrasts(y)
grid <- 10^ seq(10,-2, length=100)
standardize = FALSE
fit <- glmnet::glmnet(x[train.names,], y[train.names], family = "binomial", alpha=0,
standardize = standardize, lambda = grid, intercept = FALSE)
cv.fit <- glmnet::cv.glmnet(x[train.names,], y[train.names], family = "binomial",
type.logistic="modified.Newton", standardize = standardize,
lambda = grid, alpha=0, nfolds = length(train.names), #LOOCV
type.measure = "class", intercept = FALSE)
lambda.min <- cv.fit$lambda.min
predict(fit, newx = x[test.names,], type="class", s=lambda.min)
pred.class <- predict(fit, newx = x[test.names,], type="class", s=lambda.min)
table(pred.class,y[test.names])
alphamodel = 0
final <- glmnet::glmnet(x, y,family = "binomial", standardize = standardize,
lambda = grid, alpha = alphamodel, intercept = FALSE)
coef <- predict(final, type="coefficients", s=lambda.min)
idx <- which(!as.numeric(coef)==0)
nonZero <- coef[idx,]
nonZero
length(nonZero)
tab
tab <- table(pred.class,y[test.names])
tab
install_github("metamaden/cmlmanuscript")
i = 1
ptype = "ridge regression"
qimpfilt = 5
lexclude = list()
lrep = list()
lrep[[i]] = runRidge(seset = degfilt.se)
lrep[[1]]$confusionMatrix
runRidge
library(cmlmanuscript)
runRidge
install_github("metamaden/cmlmanuscript")
install_github("metamaden/cmlmanuscript", force = T)
library(cmlmanuscript)
runRidge
setwd("~/GitHub/cmlmanuscript/doc")
load("~/GitHub/cmlmanuscript/doc/dataprep.RData")
library(cmlmanuscript)
runRidge
i=1
ptype = "ridge regression"
qimpfilt = 5
lexclude = list()
lrep = list()
lrep[[i]] = runRidge(seset = degfilt.se)
library(SummarizedExperiment)
lrep[[i]] = runRidge(seset = degfilt.se)
lrep[[1]]$confusionMatrix
lrep[[1]]$final.model
lrep[[1]]$contrast
lrep[[1]]$nonzero.coef
length(lrep[[1]]$nonzero.coef)
coeffi = lrep[[i]]$nonzero.coef
qcoeff = quantile(coeffi, seq(0, 1, 0.5))
qcoeff
coeffi = lrep[[i]]$nonzero.coef
qcoeff = quantile(coeffi, seq(0, 1, 0.05))
qcoeff
qcoeff[20]
qcoeffilt = quantile(abs(coeffi), seq(0, 1, 0.05))[20]
qcoeffilt
length(coeffi[coeffi>=qcoeffilt])
coeffi[coeffi>=qcoeffilt]
ptype = "ridge regression"
qimpfilt = 5
lexclude = list()
lrep = list()
for(i in 1:15){
if(i == 1){
lrep[[i]] = runRidge(seset = degfilt.se)
} else{
lrep[[i]] = runLasso(seset=degfilt.se[!rownames(degfilt.se) %in% unlist(lexclude),])
}
coeffi = lrep[[i]]$nonzero.coef
qcoeffilt = quantile(abs(coeffi), seq(0, 1, 0.05))[20]
lexclude[[i]] = coeffi[coeffi>=qcoeffilt]
message("finished ", ptype," rep ", i)
}
lrep[[2]]$confusionMatrix
lrep[[3]]$confusionMatrix
lrep[[10]]$confusionMatrix
length(unlist(lexclude))
length(lexclude)
length(lexclude[[1]])
length(lexclude[[2]])
length(lexclude[[3]])
lexclude[[2]]
i = 2
i = 1
lrep[[i]] = runRidge(seset = degfilt.se)
coeffi = lrep[[i]]$nonzero.coef
qcoeffilt = quantile(abs(coeffi), seq(0, 1, 0.05))[20]
lexclude[[i]] = coeffi[coeffi>=qcoeffilt]
message("finished ", ptype," rep ", i)
i = 2
length(unlist(lexclude))
lexclude = list()
lrep = list()
i = 1
lrep[[i]] = runRidge(seset = degfilt.se)
coeffi = lrep[[i]]$nonzero.coef
qcoeffilt = quantile(abs(coeffi), seq(0, 1, 0.05))[20]
lexclude[[i]] = coeffi[coeffi>=qcoeffilt]
message("finished ", ptype," rep ", i)
i = 2
length(unlist(lexclude))
unlist(lexclude)
ptype = "ridge regression"
qimpfilt = 5
lexclude = list()
lrep = list()
for(i in 1:15){
if(i == 1){
lrep[[i]] = runRidge(seset = degfilt.se)
} else{
lrep[[i]] = runLasso(seset=degfilt.se[!rownames(degfilt.se) %in% unlist(lexclude),])
}
coeffi = lrep[[i]]$nonzero.coef
qcoeffilt = quantile(abs(coeffi), seq(0, 1, 0.05))[20]
lexclude[[i]] = names(coeffi[coeffi>=qcoeffilt])
message("finished ", ptype," rep ", i)
}
lrep[[2]]$confusionMatrix
lrep[[15]]$confusionMatrix
length(unlist(lexclude))
length(lexclude)
length(lexclude[[1]])
length(lexclude[[2]])
i = 2
unlist(lexclude)
lrep[[i]] = runLasso(seset=degfilt.se[!rownames(degfilt.se) %in% unlist(lexclude),])
lrep[[2]]$confusionMatrix
i
lrep[[2]]$nonzero.coef
dim(degfilt.se[!rownames(degfilt.se) %in% unlist(lexclude),])
dim(degfilt.se)
length(coeffi)
ptype = "ridge regression"
qimpfilt = 5
lexclude = list()
lrep = list()
for(i in 1:15){
if(i == 1){
lrep[[i]] = runRidge(seset = degfilt.se)
} else{
lrep[[i]] = runRidge(seset=degfilt.se[!rownames(degfilt.se) %in% unlist(lexclude),])
}
coeffi = lrep[[i]]$nonzero.coef
qcoeffilt = quantile(abs(coeffi), seq(0, 1, 0.05))[20]
lexclude[[i]] = names(coeffi[coeffi>=qcoeffilt])
message("finished ", ptype," rep ", i)
}
lrep[[15]]$confusionMatrix
length(unlist(lexclude))
ptype = "elastic net"
qimpfilt = 5
lexclude = list()
lrep = list()
for(i in 1:15){
if(i == 1){
lrep[[i]] = runEnet(seset = degfilt.se)
} else{
lrep[[i]] = runEnet(seset = degfilt.se[!rownames(degfilt.se) %in% unlist(lexclude),])
}
coeffi = lrep[[i]]$nonzero.coef
qcoeffilt = quantile(abs(coeffi), seq(0, 1, 0.05))[20]
lexclude[[i]] = names(coeffi[coeffi>=qcoeffilt])
message("finished ", ptype," rep ", i)
}
lrep[[15]]$confusionMatrix
lrep[[1]]$confusionMatrix
runEnet
length(lexclude)
length(unlist(lexclude))
lexclude
i =1
ptype = "elastic net"
qimpfilt = 5
lexclude = list()
lrep = list()
lrep[[i]] = runEnet(seset = degfilt.se)
lrep[[1]]$confusionMatrix
lrep[[i]]$nonzero.coef
length(lrep[[i]]$nonzero.coef)
ptype = "elastic net"
qimpfilt = 5
lexclude = list()
lrep = list()
for(i in 1:15){
if(i == 1){
lrep[[i]] = runEnet(seset = degfilt.se)
} else{
lrep[[i]] = runEnet(seset = degfilt.se[!rownames(degfilt.se) %in% unlist(lexclude),])
}
lexclude[[i]] = names(lrep[[i]]$nonzero.coef)
message("finished ", ptype," rep ", i)
}
lrep[[15]]$confusionMatrix
lrep[[1]]$confusionMatrix
lrep[[2]]$confusionMatrix
